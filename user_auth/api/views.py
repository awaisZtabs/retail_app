"""
Defines the views used in user registration/authentication.
"""
from allauth.account.models import EmailConfirmation, EmailConfirmationHMAC
from django.utils.translation import ugettext_lazy as _
from rest_auth.registration.serializers import VerifyEmailSerializer
from rest_framework import status
from rest_framework.decorators import APIView, api_view
from rest_framework.permissions import AllowAny
from rest_framework.response import Response


@api_view()
def django_rest_auth_null():
    """
    A null view for handling unallowed requests.
    """

    return Response(status=status.HTTP_400_BAD_REQUEST)


class VerifyEmailView(APIView):
    """
    An custom email verification view.
    """
    permission_classes = (AllowAny,)
    allowed_methods = ('GET', 'POST', 'OPTIONS', 'HEAD')

    def get_serializer(self, *args, **kwargs):
        """
        Returns the serializer used in this view.
        """
        return VerifyEmailSerializer(*args, **kwargs)

    def get(self, request, *args, **kwargs):
        """
        Get request handler.
        """
        if 'key' not in self.kwargs:
            return Response(
                {'key': _('Field is required.')},
                status=status.HTTP_404_NOT_FOUND)

        try:
            confirmation = self.get_object()
            confirmation.confirm(self.request)
            return Response(
                {'detail': _('Successfully confirmed email.')},
                status=status.HTTP_200_OK)
        except EmailConfirmation.DoesNotExist:
            return Response(
                {'detail': _('Error. Incorrect key.')},
                status=status.HTTP_404_NOT_FOUND)

    def post(self, request, *args, **kwargs):
        """
        Post request handler.
        """
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        self.kwargs['key'] = serializer.validated_data['key']
        try:
            confirmation = self.get_object()
            confirmation.confirm(self.request)
            return Response(
                {'detail': _('Successfully confirmed email.')},
                status=status.HTTP_200_OK)
        except EmailConfirmation.DoesNotExist:
            return Response(
                {'detail': _('Error. Incorrect key.')},
                status=status.HTTP_404_NOT_FOUND)

    def get_object(self, queryset=None):
        """
        Performs the email confirmation by matching input key to the email key
        generated by rest auth.
        """
        key = self.kwargs['key']
        emailconfirmation = EmailConfirmationHMAC.from_key(key)
        if not emailconfirmation:
            if queryset is None:
                queryset = self.get_queryset()
            try:
                emailconfirmation = queryset.get(key=key.lower())
            except EmailConfirmation.DoesNotExist as exc:
                raise EmailConfirmation.DoesNotExist()from exc
        return emailconfirmation

    def get_queryset(self):
        """
        Returns the email confirmation related to the user.
        """
        queryset = EmailConfirmation.objects.all_valid()
        queryset = queryset.select_related("email_address__user")
        return queryset
