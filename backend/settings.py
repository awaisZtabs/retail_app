"""Django settings for backend project.

Generated by 'django-admin startproject' using Django 1.11.17.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import datetime
import os

import dj_database_url
from dotenv import load_dotenv
from safedelete import HARD_DELETE, SOFT_DELETE_CASCADE

# build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
FRONTEND_URL = 'http://localhost:3000'

# load environment variables stored in .env for local development
load_dotenv(os.path.join(BASE_DIR, '.env'))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['SECRET_KEY']
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = [
#     '0.0.0.0',
#     'localhost',
#     '127.0.0.1',
#     'https://retail-irl-ncai.herokuapp.com/']
# CORS_ORIGIN_WHITELIST = (
#     'http://localhost:3000',
# )

ALLOWED_HOSTS = ['*']
CORS_ORIGIN_WHITELIST = (
    FRONTEND_URL,
)

# AMQP Server configuration
AMQP_SERVER_ADDRESS = "10.12.42.157"
AMQP_SERVER_PORT = "5672"
AMQP_USER = "retail_django_admin"
AMQP_EXCHANGE = 'amq.topic'
AMQP_PASSWORD = "admin"
AMQP_SERVER_VHOST = ""

# application definition
INSTALLED_APPS = [
    # base django applications
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'django_extensions',
    'safedelete',
    'organizations',

    # applications used in rest registration
    'django.contrib.sites',
    'whitenoise.runserver_nostatic',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_auth',
    'rest_auth.registration',

    # django channels required for live connections and streaming
    'channels',

    # our applications
    'core',
    'users',
    'user_auth',
    'app_organizations',
    'outlets',
    'locations',
    'measurement_frames',
    'cameras',
    'ds_servers',
    'ds_analytics',
    'frontend',
    'stream_analytics',
    # # 'deepstream_manager',
]

# application middlewares
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

# root url
ROOT_URLCONF = 'backend.urls'

# templates used by our applications
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# wsgi and asgi application definitions
WSGI_APPLICATION = 'backend.wsgi.application'
ASGI_APPLICATION = 'backend.asgi.application'

# definition of django channel layers
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_rabbitmq.core.RabbitmqChannelLayer',
        'CONFIG': {
            "host":
                "amqp://retail_django_admin:admin@{}/{}".format(
                    AMQP_SERVER_ADDRESS, AMQP_SERVER_VHOST
                )
        },
    },
}

# definition of our databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'retail_dbs',
        'USER': 'admin',
    }
}

# database redifinition from url. This is useful for deployment
DB_FROM_ENV = dj_database_url.config(conn_max_age=600)
DATABASES['default'].update(DB_FROM_ENV)
DATABASES['default']['ENGINE'] = 'django.db.backends.postgresql_psycopg2'

# internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# paths to static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'retail_app/static')]
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# paths to media files
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# configuration for user models
AUTH_USER_MODEL = "users.AppUser"
USER_GROUP_MODEL = "user_auth.UserGroup"

# configuration for organization models
ORGANIZATION_MODEL = "app_organizations.AppOrganization"
ORGANIZATION_USER_MODEL = "app_organizations.AppOrganizationUser"
ORGANIZATION_OWNER_MODEL = "app_organizations.AppOrganizationOwner"
ORGANIZATION_INVITED_MODEL = "app_organizations.AppOrganizationInvited"
ORGANIZATION_GROUP_MODEL = "app_organizations.OrganizationGroup"
ORGANIZATION_USER_AUTH_BACKEND = \
    'app_organizations.backends.OrganizationUserBackend'
ORGS_SLUGFIELD = "core.db.fields.CustomAutoSlugField"

# user authentication backends
AUTHENTICATION_BACKENDS = [
    # needed to login by username in Django admin, regardless of `allauth`
    'user_auth.backends.UserAuthBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]


# password validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME':
            'django.contrib.auth.password_validation.'
            'UserAttributeSimilarityValidator',
    },
    {
        'NAME':
            'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME':
            'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME':
            'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# email backend
SEND_EMAIL_TO_FILE = False
if SEND_EMAIL_TO_FILE:
    EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# django all-auth settings
SITE_ID = 1
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 86400
ACCOUNT_EMAIL_CONFIRMATION_HMAC = False
ACCOUNT_EMAIL_CONFIRMATION_URL = FRONTEND_URL + '/verify_email/?key={}'
ACCOUNT_PASSWORD_RESET_CONFIRM = FRONTEND_URL + '/password_reset/confirm/'

# REST framework settings
REST_FRAMEWORK = {
    # use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissions'
    ],
    # 'DEFAULT_RENDERER_CLASSES': [
    #     'rest_framework.renderers.JSONRenderer',
    # ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS':
        'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 1,

    'DEFAULT_FILTER_BACKENDS':
        ['django_filters.rest_framework.DjangoFilterBackend'],

    'DATETIME_FORMAT': "%Y-%m-%d %H:%M:%S.%f%z",
}

# REST_AUTH_REGISTER_PERMISSION_CLASSES = [
#     'rest_framework.permissions.IsAuthenticated']

REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER':
        'user_auth.serializers.RegistrationSerializer',
}

REST_AUTH_SERIALIZERS = {
    'JWT_SERIALIZER':
        'user_auth.serializers.JWTSerializer',
    'USER_DETAILS_SERIALIZER':
        'users.api.app_user.serializers.AppUserRetrieveSerializer',
    'PASSWORD_RESET_SERIALIZER':
        'user_auth.serializers.PasswordResetSerializer',
}

ACCOUNT_ADAPTER = 'user_auth.adapter.AppAccountAdapter'
REST_USE_JWT = True

JWT_AUTH = {
    'JWT_ENCODE_HANDLER':
    'rest_framework_jwt.utils.jwt_encode_handler',

    'JWT_DECODE_HANDLER':
    'rest_framework_jwt.utils.jwt_decode_handler',

    'JWT_PAYLOAD_HANDLER':
    'rest_framework_jwt.utils.jwt_payload_handler',

    'JWT_PAYLOAD_GET_USER_ID_HANDLER':
    'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler',

    'JWT_RESPONSE_PAYLOAD_HANDLER':
    'rest_framework_jwt.utils.jwt_response_payload_handler',

    'JWT_SECRET_KEY': SECRET_KEY,
    'JWT_GET_USER_SECRET_KEY': None,
    'JWT_PUBLIC_KEY': None,
    'JWT_PRIVATE_KEY': None,
    'JWT_ALGORITHM': 'HS256',
    'JWT_VERIFY': True,
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LEEWAY': 0,
    'JWT_AUDIENCE': None,
    'JWT_ISSUER': None,

    'JWT_ALLOW_REFRESH': True,
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
    'JWT_AUTH_COOKIE': None,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=2),
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),
}

# frontend configuration
REACT_APP_DIR = os.environ.get('RETAIL_APP_FRONTEND')
STATICFILES_DIRS.append(
    os.path.join(REACT_APP_DIR, 'build', 'static'),
)

# definition of custom loggers used in our applications
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[%(server_time)s] %(message)s',
        },
        'verbose': {
            'format':
                '{levelname} {asctime} {module} {process:d} {thread:d} '
                '{message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'deepstream_manager_input_request_format': {
            'format':
                '{levelname} {conn_protocol} {request} {url} {status} '
                '/{msg_protocol} {client} {message}',
            'style': '{',
        },
        'deepstream_manager_output_request_format': {
            'format':
                '{levelname} {conn_protocol} {request} {url} '
                '/{msg_protocol} {client} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'deepstream_manager_input_request_handler': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'deepstream_manager_input_request_format'
        },
        'deepstream_manager_output_request_handler': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'deepstream_manager_output_request_format'
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'mail_admins'],
            'level': 'INFO',
        },
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.server': {
            'handlers': ['django.server'],
            'level': 'INFO',
            'propagate': True,
        },
        'deepstream_manager_input_request_logger': {
            'handlers': ['deepstream_manager_input_request_handler'],
            'level': 'INFO',
        },
        'deepstream_manager_output_request_logger': {
            'handlers': ['deepstream_manager_output_request_handler'],
            'level': 'INFO',
        }
    }
}

CACHE_KEY_GENERATOR = \
    lambda model: '{}_updated_at_timestamp'.format(model.__name__)

if DEBUG:
    CACHES = {
        'default': {
            # dummy caching for tests
            'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
        }
    }

# safe delete settings
SAFE_DELETE_INTERPRET_UNDELETED_OBJECTS_AS_CREATED = True
DEFAULT_ADMIN_DELETION_POLICY = HARD_DELETE
